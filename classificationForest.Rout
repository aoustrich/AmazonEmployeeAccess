
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ recipes      1.0.8
✔ dials        1.2.0     ✔ rsample      1.2.0
✔ dplyr        1.1.3     ✔ tibble       3.2.1
✔ ggplot2      3.4.3     ✔ tidyr        1.3.0
✔ infer        1.0.5     ✔ tune         1.1.2
✔ modeldata    1.2.0     ✔ workflows    1.1.3
✔ parsnip      1.1.1     ✔ workflowsets 1.0.1
✔ purrr        1.0.2     ✔ yardstick    1.2.0
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ purrr::discard() masks scales::discard()
✖ dplyr::filter()  masks stats::filter()
✖ dplyr::lag()     masks stats::lag()
✖ recipes::step()  masks stats::step()
• Use tidymodels_prefer() to resolve common conflicts.
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ lubridate 1.9.3     ✔ stringr   1.5.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ readr::col_factor() masks scales::col_factor()
✖ purrr::discard()    masks scales::discard()
✖ dplyr::filter()     masks stats::filter()
✖ stringr::fixed()    masks recipes::fixed()
✖ dplyr::lag()        masks stats::lag()
✖ readr::spec()       masks yardstick::spec()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(vroom)

Attaching package: ‘vroom’

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

The following object is masked from ‘package:yardstick’:

    spec

The following object is masked from ‘package:scales’:

    col_factor

> library(glmnet)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

Loaded glmnet 4.1-8
> library(parallel)
> library(embed)
> library(ranger)
> library(doParallel)
Loading required package: foreach

Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

Loading required package: iterators
> # library(rstanarm)
> 
> startTime <- proc.time()
> 
> train <- vroom("train.csv")
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> test <- vroom("test.csv")
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> train$ACTION <- as.factor(train$ACTION)
> 
> # recipe.b <- recipe(ACTION ~ ., data = train) %>% 
> #   step_mutate_at(all_numeric_predictors(), fn = factor) %>% 
> #   step_other(all_nominal_predictors(), threshold = .001) %>% 
> #   step_lencode_bayes(all_nominal_predictors(), outcome=vars(ACTION)) %>%
> #   step_normalize(all_numeric_predictors())
> 
> # make a new recipe to do target encoding
> recipe.t <- recipe(ACTION ~ ., data = train) %>% 
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>% 
+   step_other(all_nominal_predictors(), threshold = .001) %>% 
+   step_lencode_mixed(all_nominal_predictors(), outcome=vars(ACTION)) %>% 
+   step_normalize(all_numeric_predictors())
> 
> 
> 
> 
> num_cores <- as.numeric(parallel::detectCores())#How many cores do I have?
> if (num_cores > 4)
+   num_cores = 20
> cl <- makePSOCKcluster(num_cores)
> doParallel::registerDoParallel(cl)
> 
> 
> ## Prep and Bake
> prepStart <- proc.time()
> # prepped.b <- prep(recipe.b)
> # bakedSetB <- bake(prepped.b, new_data = train)
> 
> ## Prep and Bake
> prepped.t <- prep(recipe.t)
> bakedSet <- bake(prepped.t, new_data = train)
> 
> 
> print("Time to bake:")
[1] "Time to bake:"
> proc.time()-prepStart
   user  system elapsed 
 42.992   0.512  21.939 
> 
> # Make function to predict and export
> predict_export <- function(workflowName, fileName){
+   # make predictions and prep data for Kaggle format
+   
+   preds <- workflowName %>%
+     predict(new_data = test, type="prob")
+   
+   submission <- preds %>% 
+     mutate(id=row_number()) %>% 
+     rename(Action = .pred_1) %>% 
+     select(3,2)
+   
+   directory = "./submissions/"
+   path = paste0(directory,fileName)
+   
+   vroom_write(submission, file = path, delim=',')
+   
+ 
+ }
> 
> 
> # Classification Forest ---------------------------------------------------
> randForestModel <- rand_forest(mtry = tune(),
+                                min_n=tune(),
+                                trees=500) %>% 
+   set_engine("ranger") %>% 
+   set_mode("classification")
> 
> forestWF <- workflow() %>% 
+   # add_recipe(recipe.b) %>%
+   add_recipe(recipe.t) %>% 
+   add_model(randForestModel)
> 
> # create tuning grid
> forest_tuning_grid <- grid_regular(mtry(range = c(1,(ncol(bakedSet)-1))),
+                                    min_n(),
+                                    levels = 100)
> 
> # split data for cross validation
> rfolds <- vfold_cv(train, v = 20, repeats=1)
> 
> cvStart <- proc.time()
> 
> # run cross validation
> treeCVResults <- forestWF %>% 
+   tune_grid(resamples = rfolds,
+             grid = forest_tuning_grid,
+             metrics=metric_set(roc_auc)) 
> 
> print("CV time:")
[1] "CV time:"
> proc.time()-cvStart
    user   system  elapsed 
   1.659    0.307 7266.623 
> 
> # select best model
> best_tuneForest <- treeCVResults %>% 
+   select_best("roc_auc")
> 
> # finalize workflow
> finalForestWF <- 
+   forestWF %>% 
+   finalize_workflow(best_tuneForest) %>% 
+   fit(data=train)
> 
> # predict and export
> predict_export(finalForestWF,"ClassificationForest.csv")
> 
> stopCluster(cl)
> 
> print("total time: ")
[1] "total time: "
> proc.time()-startTime
    user   system  elapsed 
 115.247    1.765 7320.724 
> 
> proc.time()
    user   system  elapsed 
 118.590    1.976 7324.371 
